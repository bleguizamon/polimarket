package co.edu.poligran.polimarket.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MovimientoStockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoStockAllPropertiesEquals(MovimientoStock expected, MovimientoStock actual) {
        assertMovimientoStockAutoGeneratedPropertiesEquals(expected, actual);
        assertMovimientoStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoStockAllUpdatablePropertiesEquals(MovimientoStock expected, MovimientoStock actual) {
        assertMovimientoStockUpdatableFieldsEquals(expected, actual);
        assertMovimientoStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoStockAutoGeneratedPropertiesEquals(MovimientoStock expected, MovimientoStock actual) {
        assertThat(actual)
            .as("Verify MovimientoStock auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoStockUpdatableFieldsEquals(MovimientoStock expected, MovimientoStock actual) {
        assertThat(actual)
            .as("Verify MovimientoStock relevant properties")
            .satisfies(a -> assertThat(a.getFecha()).as("check fecha").isEqualTo(expected.getFecha()))
            .satisfies(a -> assertThat(a.getTipo()).as("check tipo").isEqualTo(expected.getTipo()))
            .satisfies(a -> assertThat(a.getCantidad()).as("check cantidad").isEqualTo(expected.getCantidad()))
            .satisfies(a -> assertThat(a.getReferencia()).as("check referencia").isEqualTo(expected.getReferencia()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoStockUpdatableRelationshipsEquals(MovimientoStock expected, MovimientoStock actual) {
        assertThat(actual)
            .as("Verify MovimientoStock relationships")
            .satisfies(a -> assertThat(a.getProducto()).as("check producto").isEqualTo(expected.getProducto()))
            .satisfies(a -> assertThat(a.getInventario()).as("check inventario").isEqualTo(expected.getInventario()));
    }
}
